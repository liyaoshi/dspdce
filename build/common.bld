/*
 *  Copyright 2013 by Texas Instruments Incorporated.
 *
 *  All rights reserved. Property of Texas Instruments Incorporated.
 *  Restricted rights to use, duplicate or disclose this code are
 *  granted through contract.
 *
 */

/*
 *  ======== common.bld ========
 *
 */


/*
 *  ======== getCores ========
 *  Determines which cores to build for.
 *
 *  Any argument in XDCARGS which does not contain core= is treated
 *  as a core name. This way build for multiple cores can be specified by
 *  separating them with a space.
 */
function getCores(xdcArgs)
{
    var coreNames = new Array();

    /* Check for any XDCARGS with core=; these are the corenames */
    for (var i = 0; i < xdcArgs.length; i++) {
        if (xdcArgs[i].match(/core=/)) {
            coreNames.push(xdcArgs[i].substr(5));
        }
    }

    return coreNames;
}


/*
 *  ======== getProfiles ========
 *  Determines which profiles to build for.
 *
 *  Any argument in XDCARGS which does not contain platform= is treated
 *  as a profile. This way multiple build profiles can be specified by
 *  separating them with a space.
 */
function getProfiles(xdcArgs)
{
    var profiles = new Array();

    /* Check for any XDCARGS with profile=; these are profiles. */
    for (var i = 0; i < xdcArgs.length; i++) {
        if (xdcArgs[i].match(/profile=/)) {
            profiles.push(xdcArgs[i].substr(8));
        }
    }

    return profiles;
}

function getBuildModes(xdcArgs)
{
    var buildModes = new Array();

    /* Check for any XDCARGS with buildMode=; these are specific
       build configuration */
    for (var i = 0; i < xdcArgs.length; i++) {
        if (xdcArgs[i].match(/buildMode=/)) {
            buildModes.push(xdcArgs[i].substr(10));
        }
    }
    return buildModes;
}


/*
 *  ======== getTraceType ========
 *  Determines which trace type to build for.
 *
 *  Any argument in XDCARGS which does not contain trace_type= is treated
 *  as a trace type name. This way build for different trace type can be specified by
 *  separating them with a space.
 * XDCARGS="profile=debug core=app_m3 target_build=BUILD_OMAP4 trace_type=UIA_SW_ON"
 */
function getTraceType(xdcArgs)
{
    var trace_type = new Array();

    /* Check for any XDCARGS with trace_type=; these are the corenames */
    for (var i = 0; i < xdcArgs.length; i++) {
        if (xdcArgs[i].match(/trace_type=/)) {
            trace_type.push(xdcArgs[i].substr(11));
        }
    }

    return trace_type;
}

/*
 *  ======== getTargetBuild ========
 *  Determines which build to use.
 *
 */
function getTargetBuild(xdcArgs)
{
    var build = "";

    /* Check for any XDCARGS with target_build= */
    for (var i = 0; i < xdcArgs.length; i++) {
        if (xdcArgs[i].match(/target_build=/)) {
            build = xdcArgs[i].substr(13);
        }
    }

    return build;
}

/*
 *  ======== getGitTag ========
 *  Determines TAG.
 *
 */
function getGitTag(xdcArgs)
{
    var git_tag = "";
    /* Check for any XDCARGS with git_tag= */
    for (var i = 0; i < xdcArgs.length; i++) {

        if (xdcArgs[i].match(/git_tag=/)) {
           git_tag = xdcArgs[i].substr(8);
           print("i " + i + "\n");
        }
    }
    return git_tag;
}

/*
 *  ======== getGitCommitID ========
 *  Determines commit ID.
 *
 */
function getGitCommitID(xdcArgs)
{
    var commit_id = "";

    /* Check for any XDCARGS with git_commit_id= */
    for (var i = 0; i < xdcArgs.length; i++) {
        if (xdcArgs[i].match(/git_commit_id=/)) {
            commit_id = xdcArgs[i].substr(14);
        }
    }
    print ("commit_id::: " + commit_id +"\n");
    return commit_id;
}

/*
 *  ======== getGitBranch ========
 *  Determines commit ID.
 *
 */
function getGitBranch(xdcArgs)
{
    var branch = "";
    /* Check for any XDCARGS with git_branch= */
    for (var i = 0; i < xdcArgs.length; i++) {
        if (xdcArgs[i].match(/git_branch=/)) {
            branch = xdcArgs[i].substr(11);
        }
    }
    return branch;
}


/*
 *  ======== commonGetVersion ========
 *  Common commonGetVersion function
 */
function GetVersionTag()
{
  var exitCode = 1;
  var verFlags = "";
  status = {};
  var verInfo;
  var git_cmd = "git ";


  var type_cmd = "type ";
  var flush_cmd = "echo "

  Program.global.ver_commit_id = ""
  Program.global.ver_branch = ""
  Program.global.ver_tag = ""



  /*Check the target environment */
  var host_env =environment["user.dir"];
  if(host_env[1] == ':')
  {
    git_cmd = "git.exe "
    echo_cmd = "c:/windows/system32/cmd /c echo "
  }

  //branch

  exitCode = xdc.exec(git_cmd + "branch -a", {},  status)
  if (exitCode == -1)
  {
    print("Version Information not Generated \n");
    return;
  }

  var lines = status.output.split('\n')
  for (var i = 0; i < lines.length - 1; i++) {
    var line = lines[i];

    if(line.indexOf('*')!=-1){
      var GitBranch = line.substr(2)
      if (GitBranch.length) {
            Program.global.ver_branch = GitBranch;
      }
      }
  }

  //commit-id
  exitCode = xdc.exec(git_cmd + "log --oneline", {},  status)
  if (exitCode == -1) return verFlags;
  var lines = status.output.split('\n')
  var GitCommitId  = lines[0].substr(0,7)
  if (GitCommitId.length)
  {
    Program.global.ver_commit_id = GitCommitId;
  }

  //tag
  exitcode = xdc.exec(git_cmd + "describe", {},  status)
  if (exitCode == -1) return verFlags;
  var lines = status.output.split('\n')
  var tail_pos = lines.length
  var GitTag = lines[0]
  if (GitTag.length) {

    Program.global.ver_tag=GitTag;
    print ("gittag" + GitTag + Program.global.ver_tag);

  }
    //return verFlags;
}




function buildOptions(xdcArgs, aCompileOpts, coreName)
{
    var buildMode = new Array();

    var buildMode = getBuildModes(xdcArgs);

    var compileOpts = "";

    if (aCompileOpts != null){
        compileOpts += aCompileOpts;
    }
    return compileOpts;
}



/*
 *  ======== buildLibs ========
 *  This function generates the makefile goals for the libraries taking
 *  into account the profile variants, specific ducati cores and build modes
 *
 */
function buildLibs(objList, trgList, xdcArgs, libCompileOpts, coreName)
{
    var compileOpts = buildOptions(xdcArgs, libCompileOpts, coreName);
    var profiles = getProfiles(xdcArgs);
    //print ("profile length" + profiles.length +"\t" + "profile0" +  profiles[0] +"\n");
    /* If no profiles were assigned, build for  whole program debug */
    if (profiles.length == 0) {
        profiles[0] = "whole_program_debug";
    }

    for (var i = 0; i < Build.targets.length; i++) {

        var targ = Build.targets[i];

        for (var j = 0; j < profiles.length; j++) {

            var profile         = profiles[j];
            var profileOpts     = compileOpts;

            if (profile.match(/release/)) {
                profileOpts += " -O3";
            }

            if (coreName == null) {
                var lib_name = 'lib/' + profile + '/' + Pkg.name ;
            }
            else {
                var lib_name = 'lib/' + coreName + '/' + profile + '/' + Pkg.name ;
            }

            var lib = Pkg.addLibrary(lib_name, targ, {profile: profile, copts: profileOpts});

            lib.addObjects(objList);
        }
    }
}

/*
 *  ======== buildLibsByName ========
 *  This function generates the makefile goals for the libraries taking
 *  into account the profile variants, specific ducati cores and build
 *  modes. The output library name can be specified by user.
 *
 */
function buildLibsByName(objList, trgList, xdcArgs, libCompileOpts, coreName, name)
{
    var compileOpts = buildOptions(xdcArgs, libCompileOpts, coreName);
    var profiles = getProfiles(xdcArgs);
    //print ("profile length" + profiles.length +"\t" + "profile0" +  profiles[0] +"\n");
    /* If no profiles were assigned, build for  whole program debug */
    if (profiles.length == 0) {
        profiles[0] = "whole_program_debug";
    }

    for (var i = 0; i < Build.targets.length; i++) {

        var targ = Build.targets[i];

        for (var j = 0; j < profiles.length; j++) {

            var profile         = profiles[j];
            var profileOpts     = compileOpts;

            if (profile.match(/release/)) {
                profileOpts += " -O3";
            }

            if (coreName == null) {
                var lib_name = 'lib/' + profile + '/' + name ;
            }
            else {
                var lib_name = 'lib/' + coreName + '/' + profile + '/' + name ;
            }

            var lib = Pkg.addLibrary(lib_name, targ, {profile: profile, copts: profileOpts});

            lib.addObjects(objList);
        }
    }
}

/*
 *  ======== supportsCore ========
 *  Returns true if coreName is in the supported core list. If coreNameList
 *  is null or empty, that's taken to mean all targets are supported.
 */
function supportsCore(coreName, coreNameList)
{
    if ((coreNameList == null) || (coreNameList.length == 0)) {
        return true;
    }

    for (var j = 0; j < coreNameList.length; j++) {
        if(coreName.match(coreNameList[j])){
            return true;
        }
    }

    return false;
}

/*
 *  ======== commonGetLibs ========
 *  Common getLibs function
 */

function commonGetLibs(prog, bCoreFlag, pkg, dir)
{
    var suffix;

    /* find a compatible suffix */
    if ("findSuffix" in prog.build.target) {
        suffix = prog.build.target.findSuffix(pkg);
    }
    else {
        suffix = prog.build.target.suffix;
    }

    var name = pkg.$name + ".a" + suffix;
    var lib  = "";

    if (bCoreFlag == true) {
        lib = "lib/" + prog.global.coreName + "/" + pkg.profile + "/" + name;
    }
    else {
        lib = "lib/" + "/" + pkg.profile + "/" + name;
    }

    if (java.io.File(dir + lib).exists()) {
        return lib;
    }
    else {
        print("Default lib not found: " + lib +"\nlooking for release lib");
        if (bCoreFlag == true) {
          lib = "lib/" + prog.global.coreName + "/" + "release/" + name;
        }
        else {
          lib = "lib/" + "/" + "release/" + name;
        }
        if (java.io.File(dir + lib).exists()) {
            return lib;
        }
    }

    /* could not find any library, throw exception */
    throw Error("Library not found: " + lib);
}

